// @strict-types
#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

// При создании на сервере заполняет таблицу условий испытания
// 
// Параметры:
//  Отказ - Булево - Отказ
//  СтандартнаяОбработка - Булево - Стандартная обработка
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Объект.Ссылка.Пустая() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	УсловияИспытаний.Наименование,
			|	УсловияИспытаний.Ссылка
			|ИЗ
			|	Справочник.УсловияИспытаний КАК УсловияИспытаний
			|ГДЕ
			|	УсловияИспытаний.Предопределенный = ИСТИНА";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтрокаТаблицУсловия = Объект.Условия.Добавить();
			СтрокаТаблицУсловия.Показатель = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Код процедур и функций

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИзмерительныеПриборы

// Измерительные приборы наименование обработка выбора.
// 
// Параметры:
//  Элемент - ПолеФормы - Элемент
//  ВыбранноеЗначение - СправочникСсылка.Оборудование - Выбранное значение
//  СтандартнаяОбработка - Булево - Стандартная обработка
&НаКлиенте
Процедура ИзмерительныеПриборыНаименованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ДанныеСтроки = Элементы.ИзмерительныеПриборы.ТекущиеДанные;
	Если Не ТребуетсяПоверка(ВыбранноеЗначение) Тогда
		ПараДат = ИзмерительныеПриборыПриИзмененииНаСервере(Объект.Дата, ВыбранноеЗначение.Ссылка);
		ДанныеСтроки.ДатаПоверки = ПараДат.ДатаПоверки;
		ДанныеСтроки.ДатаСледующейПоверки = ПараДат.ДатаСледующейПоверки;
	Иначе
		ДанныеСтроки.ДатаПоверки = Неопределено;
		ДанныеСтроки.ДатаСледующейПоверки = Неопределено;
	КонецЕсли;

КонецПроцедуры
#КонецОбласти
#Область ОбработчикиСобытийЭлементовТаблицыФормыНоминальныйОбъем
&НаКлиенте
Процедура НоминальныйОбъемМассаБруттоПриИзменении(Элемент)
	Пересчет(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НоминальныйОбъемМассаПустойУпаковкиПриИзменении(Элемент)
	Пересчет(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НоминальныйОбъемМассаПродуктаПриИзменении(Элемент)
	Пересчет(Элемент);
КонецПроцедуры
#КонецОбласти


#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура ЗаполнитьСписокОборудования(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",Ложь);
	ОбработкаВыбора = Новый ОписаниеОповещения("ПриЗакрытииФормыВыбора", ЭтотОбъект, "ПодборОборудования");
	ОткрытьФорму("Справочник.НаборыОборудования.Форма.ФормаВыбора", ПараметрыФормы, ЭтотОбъект, , , , ОбработкаВыбора);	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Получить коэффициент для расчета доверительного интервала.
// 
// Параметры:
//  РазмерПартии - Число - Объем выборки
//  ИмяТаблицы - Строка - Имя таблицы в справочнике Планы контроля
// 
// Возвращаемое значение:
//  Число
//
&НаСервере  
Функция ПолучитьКоэффициент(РазмерПартии, ИмяТаблицы)
	Перем Коэффициент; //Число
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПланыКонтроля.Коэффициент
		|ИЗ
		|	Справочник.ПланыКонтроля КАК ПланыКонтроля
		|ГДЕ
		|	ПланыКонтроля.ИмяТаблицы = &ИмяТаблицы
		|	И ПланыКонтроля.ПометкаУдаления = ЛОЖЬ
		|	И ПланыКонтроля.МинимальныйОбъем <= &РазмерПартии
		|	И ПланыКонтроля.МаксимальныйОбъем >= &РазмерПартии";
	
	Запрос.УстановитьПараметр("РазмерПартии", РазмерПартии);
	Запрос.УстановитьПараметр("ИмяТаблицы", ИмяТаблицы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Коэффициент = ВыборкаДетальныеЗаписи.Коэффициент;
	КонецЦикла;
	Если Коэффициент = Неопределено Тогда
		Коэффициент = 0;
	КонецЕсли;
	Возврат Коэффициент;
КонецФункции

// Получить плотность.
// 
// Параметры:
//  СсылкаНоменклатура - СправочникСсылка.Номенклатура
// 
// Возвращаемое значение:
//  Число
&НаСервере
Функция ПолучитьПлотность(СсылкаНоменклатура)
	Номенклатура =СсылкаНоменклатура.ПолучитьОбъект();
	Возврат Номенклатура.Плотность;
КонецФункции

// Пересчет.
// 
// Параметры:
//  Элемент - ПолеФормы
&НаКлиенте
Процедура Пересчет(Элемент)
	ДанныеСтроки = Элементы.НоминальныйОбъем.ТекущиеДанные;
	Если Элемент.Имя = "НоминальныйОбъемМассаБрутто" или Элемент.Имя = "НоминальныйОбъемМассаПустойУпаковки" Тогда
		ДанныеСтроки.МассаПродукта = ДанныеСтроки.МассаБрутто - ДанныеСтроки.МассаПустойУпаковки;
	ИначеЕсли Элемент.Имя = "НоминальныйОбъемМассаПродукта" Тогда
		 ДанныеСтроки.МассаПустойУпаковки = ДанныеСтроки.МассаБрутто - ДанныеСтроки.МассаПустойУпаковки;
	КонецЕсли;
	ДанныеСтроки.ДействительныйОбъем = ДанныеСтроки.МассаПродукта/ПолучитьПлотность(Объект.Номенклатура);
	Объект.СреднееАрефметическоеОбъема = Объект.НоминальныйОбъем.Итог("ДействительныйОбъем")/Объект.НоминальныйОбъем.Количество();

    СуммаОтклонений = 0;
    ТаблицаДанных = Объект.НоминальныйОбъем;
    КоличествоИзмерений = ТаблицаДанных.Количество();
    Для Каждого СтрокаТД Из ТаблицаДанных Цикл
        СуммаОтклонений = СуммаОтклонений + ((Объект.СреднееАрефметическоеОбъема - СтрокаТД.ДействительныйОбъем)*(Объект.СреднееАрефметическоеОбъема - СтрокаТД.ДействительныйОбъем));
    КонецЦикла;
    Объект.СреднееКвадратическоеОтклонение = sqrt(1/(КоличествоИзмерений-1)*СуммаОтклонений);
    Объект.СреднееСодержимоеПартии = Объект.СреднееАрефметическоеОбъема + (ПолучитьКоэффициент(Объект.РазмерПартии, "Б2") * Объект.СреднееКвадратическоеОтклонение);
КонецПроцедуры

// При закрытии формы выбора набора оборудования.
// 
// Параметры:
//  Значение - СправочникСсылка.НаборыОборудования
//  ДопПараметры - Структура
&НаКлиенте
Процедура ПриЗакрытииФормыВыбора(Значение, ДопПараметры) Экспорт

	Если Значение <> Неопределено Тогда
		Объект.ИзмерительныеПриборы.Очистить();
		СписокОборудования = Новый Массив();
		СписокОборудования = ЗаполнитьСписокОборудованияНаСервере(Значение, Объект.Дата); 
		Для Каждого ЕденицаОбрудования Из СписокОборудования Цикл
			НоваяСтрока = Объект.ИзмерительныеПриборы.Добавить();
			НоваяСтрока.Наименование = ЕденицаОбрудования.СсылкаПрибор;
			НоваяСтрока.ДатаПоверки = ЕденицаОбрудования.ДатаПоверки;
			НоваяСтрока.ДатаСледующейПоверки = ЕденицаОбрудования.ДатаСледующейПоверки;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Функция проверяет требуется ли поверка оборудования
// 
// Параметры:
//  Оборудование - СправочникСсылка.Оборудование, Произвольный - Оборудование
// 
// Возвращаемое значение:
//  Булево - Истина если поверка не требуется
&НаСервере
Функция ТребуетсяПоверка(Оборудование)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Оборудование.ПоверкаНеТребуется КАК ПоверкаНеТребуется
	|ИЗ
	|	Справочник.Оборудование КАК Оборудование
	|ГДЕ
	|	Оборудование.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", Оборудование);

	РезультатЗапроса = Запрос.Выполнить();
	 
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.ПоверкаНеТребуется;
	КонецЦикла;

КонецФункции


// Функция возвращает дату последней и следующей поверки оборудования
// 
// Параметры:
//  ДатаСреза - Дата
//  Оборудование - СправочникСсылка.Оборудование
// 
// Возвращаемое значение:
//  Структура:
// 		* ДатаПоверки - Дата
// 		* ДатаСледующейПоверки - Дата
&НаСервере
Функция ИзмерительныеПриборыПриИзмененииНаСервере(ДатаСреза, Оборудование)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоверкиСрезПоследних.ДатаПоверки,
	|	ПоверкиСрезПоследних.ДатаСледующейПоверки
	|ИЗ
	|	РегистрСведений.Поверки.СрезПоследних(&ДатаСреза,) КАК ПоверкиСрезПоследних
	|ГДЕ
	|	ПоверкиСрезПоследних.Оборудование = &Оборудование";

	Запрос.УстановитьПараметр("Оборудование", Оборудование);
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Даты = Новый Структура;
		Даты.Вставить("ДатаПоверки", ВыборкаДетальныеЗаписи.ДатаПоверки);
		Даты.Вставить("ДатаСледующейПоверки", ВыборкаДетальныеЗаписи.ДатаСледующейПоверки);
		Возврат Даты;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

// Заполнить список оборудования на сервере.
// 
// Параметры:
//  ВыбранныйНабор - СправочникСсылка.НаборыОборудования - Набор оборудования выбранный для иссследования
//  ДатаСреза - Дата
// 
// Возвращаемое значение:
//  Структура:
//   * СсылкаПрибор - СправочникСсылка.Оборудование
//   * ДатаПоверки - Дата
//   * ДатаСледующейПоверки - Дата
//   
&НаСервере
Функция ЗаполнитьСписокОборудованияНаСервере(ВыбранныйНабор, ДатаСреза)
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НаборыОборудованияОборудование.Прибор.Ссылка КАК СсылкаПрибор,
		|	ПоверкиСрезПоследних.ДатаПоверки КАК ДатаПоверки,
		|	ПоверкиСрезПоследних.ДатаСледующейПоверки КАК ДатаСледующейПоверки
		|ИЗ
		|	Справочник.НаборыОборудования.Оборудование КАК НаборыОборудованияОборудование
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Поверки.СрезПоследних(&ДатаСреза,) КАК ПоверкиСрезПоследних
		|		ПО НаборыОборудованияОборудование.Прибор.Ссылка = ПоверкиСрезПоследних.Оборудование.Ссылка
		|ГДЕ
		|	НаборыОборудованияОборудование.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ВыбранныйНабор);
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);	
	
	ТЗОборудования = Новый ТаблицаЗначений();
	ТЗОборудования = Запрос.Выполнить().Выгрузить();
	МассивОборудования = ОбщегоНазначенияВызовСервера.ПреобразоватьТаблицуЗначенийВМассив(ТЗОборудования);
	Возврат МассивОборудования;
КонецФункции
#КонецОбласти